-------------------------------------------------------------------------------
-- Pure Type Systems
--
-------------------------------------------------------------------------------

open import Specification

module PTS (­ЮЋі : Spec) where

open import Data.Nat using (РёЋ; suc; pred; _РЅц?_; _РЅЪ_)
open import Relation.Nullary using (yes; no; ┬г_)
open import Relation.Binary.PropositionalEquality using (_РЅА_; _РЅб_)

-------------------------------------------------------------------------------
-- Grammar (with explicit sort annotations)

infix 30 s_
infix 22 кЏ_┬и_
infix 22 ╬а_┬и_
infix 22 _┬Д_
data ­ЮЋІ : Set where
  s_ : Spec.Sort ­ЮЋі Рєњ ­ЮЋІ
  fРЪе_РЎ»_РЪЕ : РёЋ Рєњ Spec.Sort ­ЮЋі Рєњ ­ЮЋІ
  bРЪе_РЪЕ : РёЋ Рєњ ­ЮЋІ
  кЏ_┬и_ : ­ЮЋІ Рєњ ­ЮЋІ Рєњ ­ЮЋІ
  ╬а_┬и_ : ­ЮЋІ Рєњ ­ЮЋІ Рєњ ­ЮЋІ
  _┬Д_ : ­ЮЋІ Рєњ ­ЮЋІ Рєњ ­ЮЋІ

-------------------------------------------------------------------------------
-- Substitution and Lifting

infix 25 _[_/_]
_[_/_] : ­ЮЋІ Рєњ ­ЮЋІ Рєњ РёЋ Рєњ ­ЮЋІ
s i [ n / y ] = s i
fРЪе x РЎ» i РЪЕ [ n / y ] with x РЅЪ y
...                  | yes _ = n
...                  | no _ =  fРЪе x РЎ» i РЪЕ
bРЪе x РЪЕ [ n / y ] = bРЪе x РЪЕ
(кЏ a ┬и m) [ n / y ] = кЏ a [ n / y ] ┬и m [ n / y ]
(╬а a ┬и b) [ n / y ] = ╬а a [ n / y ] ┬и b [ n / y ]
(mРѓЂ ┬Д mРѓѓ) [ n / y ] = mРѓЂ [ n / y ] ┬Д mРѓѓ [ n / y ]


infix 25 _[_]РЂ░
_[_]РЂ░ : ­ЮЋІ Рєњ ­ЮЋІ Рєњ ­ЮЋІ
m [ n ]РЂ░ = m [ n / 0 ]рхЄ where
  _[_/_]рхЄ : ­ЮЋІ Рєњ ­ЮЋІ Рєњ РёЋ Рєњ ­ЮЋІ
  s i [ n / y ]рхЄ = s i
  fРЪе x РЎ» i РЪЕ [ n / y ]рхЄ = fРЪе x РЎ» i РЪЕ
  bРЪе x РЪЕ [ n / y ]рхЄ with x РЅЪ y
  ...               | yes _ = n
  ...               | no _ = bРЪе x РЪЕ
  (кЏ a ┬и m) [ n / y ]рхЄ = кЏ a [ n / y ]рхЄ ┬и (m [ n / suc y ]рхЄ)
  (╬а a ┬и b) [ n / y ]рхЄ = ╬а a [ n / y ]рхЄ ┬и (b [ n / suc y ]рхЄ)
  (mРѓЂ ┬Д mРѓѓ) [ n / y ]рхЄ = (mРѓЂ [ n / y ]рхЄ) ┬Д (mРѓѓ [ n / y ]рхЄ)

-------------------------------------------------------------------------------
-- ╬▓-Reduction

infix 15 _РЪХрхЄ_
data _РЪХрхЄ_ : ­ЮЋІ Рєњ ­ЮЋІ Рєњ Set where
  ╬▓-rule : Рѕђ {a m n} Рєњ
    (кЏ a ┬и m) ┬Д n РЪХрхЄ m [ n ]РЂ░
  comp-piРѓЂ : Рѕђ {a b a'} Рєњ
    a РЪХрхЄ a' Рєњ
    ╬а a ┬и b РЪХрхЄ ╬а a ┬и b
  comp-piРѓѓ : Рѕђ {a b b'} Рєњ
    b РЪХрхЄ b' Рєњ
    ╬а a ┬и b РЪХрхЄ ╬а a ┬и b'
  comp-lamРѓЂ : Рѕђ {a b a'} Рєњ
    a РЪХрхЄ a' Рєњ
    кЏ a ┬и b РЪХрхЄ кЏ a' ┬и b
  comp-lamРѓѓ : Рѕђ {a b b'} Рєњ
    b РЪХрхЄ b' Рєњ
    кЏ a ┬и b РЪХрхЄ кЏ a ┬и b'
  comp-appРѓЂ : Рѕђ {a b a'} Рєњ
    a РЪХрхЄ a' Рєњ
    a ┬Д b РЪХрхЄ a' ┬Д b
  comp-appРѓѓ : Рѕђ {a b b'} Рєњ
    b РЪХрхЄ b' Рєњ
    a ┬Д b РЪХрхЄ a ┬Д b'

data _РєархЄ_ : ­ЮЋІ Рєњ ­ЮЋІ Рєњ Set where
  ╬▓-refl : Рѕђ {m} Рєњ m РєархЄ m
  ╬▓-step : Рѕђ {m n n'} Рєњ m РЪХрхЄ n Рєњ n РєархЄ n' Рєњ m РєархЄ n'

РєархЄ-trans : Рѕђ {m n p} Рєњ
  m РєархЄ n Рєњ
  n РєархЄ p Рєњ
  m РєархЄ p
РєархЄ-trans ╬▓-refl np = np
РєархЄ-trans (╬▓-step mn nn') np = ╬▓-step mn (РєархЄ-trans nn' np)

data _=рхЄ_ : ­ЮЋІ Рєњ ­ЮЋІ Рєњ Set where
  =рхЄ-refl : Рѕђ {m n} Рєњ m РєархЄ n Рєњ m =рхЄ n
  =рхЄ-sym : Рѕђ {m n} Рєњ m =рхЄ n Рєњ n =рхЄ m
  =рхЄ-trans : Рѕђ {m n p} Рєњ m =рхЄ n Рєњ n =рхЄ p Рєњ m =рхЄ p

-------------------------------------------------------------------------------
-- Contexts

infix 22 _,_Рѕи_
data Рёѓ : Set where
  РѕЁ : Рёѓ
  _,_Рѕи_ : Рёѓ Рєњ РёЋ Рєњ ­ЮЋІ Рєњ Рёѓ

data _РѕЅ_ : РёЋ Рєњ Рёѓ Рєњ Set where
  РѕЅРѕЁ : Рѕђ {x} Рєњ x РѕЅ РѕЁ
  РѕЅ╬Њ : Рѕђ {x y ╬Њ a} Рєњ
    x РѕЅ ╬Њ Рєњ
    x РЅб y Рєњ
    x РѕЅ (╬Њ , y Рѕи a)

infix 25 _[_/_]рХю
_[_/_]рХю : Рёѓ Рєњ ­ЮЋІ Рєњ РёЋ Рєњ Рёѓ
РѕЁ [ _ / _ ]рХю = РѕЁ
(╬Њ , x Рѕи a) [ n / y ]рХю = ╬Њ [ n / y ]рХю , x Рѕи a [ n / y ]


infix 25 _Рѕў_
_Рѕў_ : Рёѓ Рєњ Рёѓ Рєњ Рёѓ
╬Њ Рѕў РѕЁ = ╬Њ
╬Њ Рѕў (╬ћ , x Рѕи a) = ╬Њ Рѕў ╬ћ , x Рѕи a

-------------------------------------------------------------------------------
-- Typing Inference

data _Ріб_Рѕи_ : Рёѓ Рєњ ­ЮЋІ Рєњ ­ЮЋІ Рєњ SetРѓЂ where
  axiom : Рѕђ {i j} Рєњ Spec.axiom ­ЮЋі i j Рєњ
    -----------------------------------
    РѕЁ Ріб s i Рѕи s j

  var-intro : Рѕђ {x i ╬Њ a} Рєњ x РѕЅ ╬Њ Рєњ
    ╬Њ Ріб a Рѕи s i Рєњ
    -----------------------------------
    ╬Њ , x Рѕи a Ріб fРЪе x РЎ» i РЪЕ Рѕи a

  sort-weaken : Рѕђ {x i j k ╬Њ b} Рєњ Spec.axiom ­ЮЋі j k Рєњ x РѕЅ ╬Њ Рєњ
    ╬Њ Ріб b Рѕи s i Рєњ
    ╬Њ Ріб s j Рѕи s k Рєњ
    -----------------------------------
    ╬Њ , x Рѕи b Ріб s j Рѕи s k

  var-weaken : Рѕђ {x y i j ╬Њ a b} Рєњ
    y РѕЅ ╬Њ Рєњ
    ╬Њ Ріб b Рѕи s j Рєњ
    ╬Њ Ріб fРЪе x РЎ» i РЪЕ Рѕи a Рєњ
    -----------------------------------
    ╬Њ , y Рѕи b Ріб fРЪе x РЎ» i РЪЕ Рѕи a

  pi-intro : Рѕђ {a i j k ╬Њ b x} Рєњ Spec.rule ­ЮЋі i j k Рєњ
    ╬Њ Ріб a Рѕи s i Рєњ
    ╬Њ , x Рѕи a Ріб b Рѕи s j Рєњ
    -----------------------------------
    ╬Њ Ріб ╬а a ┬и (b [ bРЪе 0 РЪЕ / x ]) Рѕи s k

  abstr : Рѕђ {a i j k ╬Њ m b x} Рєњ
    ╬Њ Ріб a Рѕи s i Рєњ
    ╬Њ , x Рѕи a Ріб b Рѕи s j Рєњ
    Spec.rule ­ЮЋі i j k Рєњ
    ╬Њ , x Рѕи a Ріб m Рѕи b Рєњ
    -----------------------------------
    ╬Њ Ріб кЏ a ┬и (m [ bРЪе 0 РЪЕ / x ]) Рѕи ╬а a ┬и b [ bРЪе 0 РЪЕ / x ]

  app : Рѕђ {╬Њ m n x a b j} Рєњ
    ╬Њ , x Рѕи a Ріб b Рѕи s j Рєњ
    ╬Њ Ріб m Рѕи ╬а a ┬и b [ bРЪе 0 РЪЕ / x ] Рєњ
    ╬Њ Ріб n Рѕи a Рєњ
    -----------------------------------
    ╬Њ Ріб m ┬Д n Рѕи b [ n / x ]

  conv-red : Рѕђ {i ╬Њ m a b} Рєњ
    ╬Њ Ріб m Рѕи a Рєњ
    ╬Њ Ріб b Рѕи s i Рєњ
    a РєархЄ b Рєњ
    ----------------------------------- 
    ╬Њ Ріб m Рѕи b
  
  conv-exp : Рѕђ {i ╬Њ m a b} Рєњ
    ╬Њ Ріб m Рѕи a Рєњ
    ╬Њ Ріб b Рѕи s i Рєњ
    b РєархЄ a Рєњ
    -----------------------------------
    ╬Њ Ріб m Рѕи b

_Ріг_Рѕи_ : Рёѓ Рєњ ­ЮЋІ Рєњ ­ЮЋІ Рєњ SetРѓЂ
╬Њ Ріг m Рѕи a = ┬г (╬Њ Ріб m Рѕи a)

-------------------------------------------------------------------------------
-- Well-formed Context

data WFC : Рёѓ Рєњ SetРѓЂ where
  РѕЁ-wf : WFC РѕЁ
  ext-wf : Рѕђ {x i ╬Њ a} Рєњ
    x РѕЅ ╬Њ Рєњ
    ╬Њ Ріб a Рѕи s i Рєњ
    WFC ╬Њ Рєњ
    WFC (╬Њ , x Рѕи a)
